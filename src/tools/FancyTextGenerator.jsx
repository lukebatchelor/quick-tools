import React, { useState, useEffect } from 'react';
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Copy } from 'lucide-react';
import { useTheme } from '../ThemeContext';

const transformations = {
  mirror: (text) => text.split('').reverse().join(''),
  upsideDown: (text) => {
    const upsideDownChars = {
      'a': '…ê', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù', 'f': '…ü', 'g': '∆É', 'h': '…•',
      'i': '·¥â', 'j': '…æ', 'k': ' û', 'l': 'l', 'm': '…Ø', 'n': 'u', 'o': 'o', 'p': 'd',
      'q': 'b', 'r': '…π', 's': 's', 't': ' á', 'u': 'n', 'v': ' å', 'w': ' ç', 'x': 'x',
      'y': ' é', 'z': 'z', 'A': '‚àÄ', 'B': 'q', 'C': '∆Ü', 'D': 'p', 'E': '∆é', 'F': '‚Ñ≤',
      'G': '◊§', 'H': 'H', 'I': 'I', 'J': '≈ø', 'K': ' û', 'L': 'À•', 'M': 'W', 'N': 'N',
      'O': 'O', 'P': '‘Ä', 'Q': 'Q', 'R': '…π', 'S': 'S', 'T': '‚î¥', 'U': '‚à©', 'V': 'Œõ',
      'W': 'M', 'X': 'X', 'Y': '‚ÖÑ', 'Z': 'Z', '0': '0', '1': '∆ñ', '2': '·ÑÖ', '3': '∆ê',
      '4': '„Ñ£', '5': 'œõ', '6': '9', '7': '„Ñ•', '8': '8', '9': '6', ',': "'", '.': 'Àô',
      '?': '¬ø', '!': '¬°', '"': '‚Äû', "'": ',', '(': ')', ')': '(', '[': ']', ']': '[',
      '{': '}', '}': '{', '<': '>', '>': '<', '&': '‚Öã', '_': '‚Äæ',
    };
    return text.split('').map(char => upsideDownChars[char] || char).reverse().join('');
  },
  zalgo: (text) => {
    const zalgoChars = [
      '\u030d', '\u030e', '\u0304', '\u0305', '\u033f', '\u0311', '\u0306', '\u0310',
      '\u0352', '\u0357', '\u0351', '\u0307', '\u0308', '\u030a', '\u0342', '\u0343',
      '\u0344', '\u034a', '\u034b', '\u034c', '\u0303', '\u0302', '\u030c', '\u0350',
      '\u0300', '\u0301', '\u030b', '\u030f', '\u0312', '\u0313', '\u0314', '\u033d',
      '\u0309', '\u0363', '\u0364', '\u0365', '\u0366', '\u0367', '\u0368', '\u0369',
      '\u036a', '\u036b', '\u036c', '\u036d', '\u036e', '\u036f', '\u033e', '\u035b',
    ];
    return text.split('').map(char => char + zalgoChars.map(z => Math.random() > 0.7 ? z : '').join('')).join('');
  },
  strikeThrough: (text) => text.split('').map(char => char + '\u0336').join(''),
  mockingSpongebob: (text) => {
    return text.split('').map(char => Math.random() > 0.5 ? char.toUpperCase() : char.toLowerCase()).join('');
  },
  circled: (text) => {
    const circledChars = {
      'A': '‚í∂', 'B': '‚í∑', 'C': '‚í∏', 'D': '‚íπ', 'E': '‚í∫', 'F': '‚íª', 'G': '‚íº', 'H': '‚íΩ',
      'I': '‚íæ', 'J': '‚íø', 'K': '‚ìÄ', 'L': '‚ìÅ', 'M': '‚ìÇ', 'N': '‚ìÉ', 'O': '‚ìÑ', 'P': '‚ìÖ',
      'Q': '‚ìÜ', 'R': '‚ìá', 'S': '‚ìà', 'T': '‚ìâ', 'U': '‚ìä', 'V': '‚ìã', 'W': '‚ìå', 'X': '‚ìç',
      'Y': '‚ìé', 'Z': '‚ìè', 'a': '‚ìê', 'b': '‚ìë', 'c': '‚ìí', 'd': '‚ìì', 'e': '‚ìî', 'f': '‚ìï',
      'g': '‚ìñ', 'h': '‚ìó', 'i': '‚ìò', 'j': '‚ìô', 'k': '‚ìö', 'l': '‚ìõ', 'm': '‚ìú', 'n': '‚ìù',
      'o': '‚ìû', 'p': '‚ìü', 'q': '‚ì†', 'r': '‚ì°', 's': '‚ì¢', 't': '‚ì£', 'u': '‚ì§', 'v': '‚ì•',
      'w': '‚ì¶', 'x': '‚ìß', 'y': '‚ì®', 'z': '‚ì©', '0': '‚ì™', '1': '‚ë†', '2': '‚ë°', '3': '‚ë¢',
      '4': '‚ë£', '5': '‚ë§', '6': '‚ë•', '7': '‚ë¶', '8': '‚ëß', '9': '‚ë®',
    };
    return text.split('').map(char => circledChars[char] || char).join('');
  },
  medieval: (text) => {
    const medievalChars = {
      'a': 'ùîû', 'b': 'ùîü', 'c': 'ùî†', 'd': 'ùî°', 'e': 'ùî¢', 'f': 'ùî£', 'g': 'ùî§', 'h': 'ùî•', 'i': 'ùî¶', 'j': 'ùîß',
      'k': 'ùî®', 'l': 'ùî©', 'm': 'ùî™', 'n': 'ùî´', 'o': 'ùî¨', 'p': 'ùî≠', 'q': 'ùîÆ', 'r': 'ùîØ', 's': 'ùî∞', 't': 'ùî±',
      'u': 'ùî≤', 'v': 'ùî≥', 'w': 'ùî¥', 'x': 'ùîµ', 'y': 'ùî∂', 'z': 'ùî∑',
      'A': 'ùîÑ', 'B': 'ùîÖ', 'C': '‚Ñ≠', 'D': 'ùîá', 'E': 'ùîà', 'F': 'ùîâ', 'G': 'ùîä', 'H': '‚Ñå', 'I': '‚Ñë', 'J': 'ùîç',
      'K': 'ùîé', 'L': 'ùîè', 'M': 'ùîê', 'N': 'ùîë', 'O': 'ùîí', 'P': 'ùîì', 'Q': 'ùîî', 'R': '‚Ñú', 'S': 'ùîñ', 'T': 'ùîó',
      'U': 'ùîò', 'V': 'ùîô', 'W': 'ùîö', 'X': 'ùîõ', 'Y': 'ùîú', 'Z': '‚Ñ®'
    };
    return text.split('').map(char => medievalChars[char] || char).join('');
  },

  script: (text) => {
    const scriptChars = {
      'a': 'ùì™', 'b': 'ùì´', 'c': 'ùì¨', 'd': 'ùì≠', 'e': 'ùìÆ', 'f': 'ùìØ', 'g': 'ùì∞', 'h': 'ùì±', 'i': 'ùì≤', 'j': 'ùì≥',
      'k': 'ùì¥', 'l': 'ùìµ', 'm': 'ùì∂', 'n': 'ùì∑', 'o': 'ùì∏', 'p': 'ùìπ', 'q': 'ùì∫', 'r': 'ùìª', 's': 'ùìº', 't': 'ùìΩ',
      'u': 'ùìæ', 'v': 'ùìø', 'w': 'ùîÄ', 'x': 'ùîÅ', 'y': 'ùîÇ', 'z': 'ùîÉ',
      'A': 'ùìê', 'B': 'ùìë', 'C': 'ùìí', 'D': 'ùìì', 'E': 'ùìî', 'F': 'ùìï', 'G': 'ùìñ', 'H': 'ùìó', 'I': 'ùìò', 'J': 'ùìô',
      'K': 'ùìö', 'L': 'ùìõ', 'M': 'ùìú', 'N': 'ùìù', 'O': 'ùìû', 'P': 'ùìü', 'Q': 'ùì†', 'R': 'ùì°', 'S': 'ùì¢', 'T': 'ùì£',
      'U': 'ùì§', 'V': 'ùì•', 'W': 'ùì¶', 'X': 'ùìß', 'Y': 'ùì®', 'Z': 'ùì©'
    };
    return text.split('').map(char => scriptChars[char] || char).join('');
  },

  wide: (text) => {
    return text.split('').join(' ');
  },

  tinyCaps: (text) => {
    const tinyCapChars = {
      'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á', 'f': 'Íú∞', 'g': '…¢', 'h': ' ú', 'i': '…™', 'j': '·¥ä',
      'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è', 'p': '·¥ò', 'q': '«´', 'r': ' Ä', 's': 's', 't': '·¥õ',
      'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x', 'y': ' è', 'z': '·¥¢'
    };
    return text.toLowerCase().split('').map(char => tinyCapChars[char] || char).join('');
  },

  emojiLetters: (text) => {
    const emojiLetters = {
      'a': 'üÖ∞', 'b': 'üÖ±', 'c': 'üÖ≤', 'd': 'üÖ≥', 'e': 'üÖ¥', 'f': 'üÖµ', 'g': 'üÖ∂', 'h': 'üÖ∑', 'i': 'üÖ∏', 'j': 'üÖπ',
      'k': 'üÖ∫', 'l': 'üÖª', 'm': 'üÖº', 'n': 'üÖΩ', 'o': 'üÖæ', 'p': 'üÖø', 'q': 'üÜÄ', 'r': 'üÜÅ', 's': 'üÜÇ', 't': 'üÜÉ',
      'u': 'üÜÑ', 'v': 'üÜÖ', 'w': 'üÜÜ', 'x': 'üÜá', 'y': 'üÜà', 'z': 'üÜâ'
    };
    return text.toLowerCase().split('').map(char => emojiLetters[char] || char).join('');
  },

  morse: (text) => {
    const morseCode = {
      'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....',
      'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.',
      'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',
      'y': '-.--', 'z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-',
      '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.'
    };
    return text.toLowerCase().split('').map(char => morseCode[char] || char).join(' ');
  },
  binary: (text) => {
    return text.split('').map(char => char.charCodeAt(0).toString(2).padStart(8, '0')).join(' ');
  },

  pigLatin: (text) => {
    return text.split(' ').map(word => {
      if (word.length > 2) {
        return word.slice(1) + word[0] + 'ay';
      }
      return word;
    }).join(' ');
  },

  leetSpeak: (text) => {
    const leetMap = {'a': '4', 'e': '3', 'i': '1', 'o': '0', 's': '5', 't': '7'};
    return text.toLowerCase().split('').map(char => leetMap[char] || char).join('');
  },

  vaporwave: (text) => {
    return text.split('').join(' ').toUpperCase();
  },

  subscript: (text) => {
    const subscriptMap = {
      '0': '‚ÇÄ', '1': '‚ÇÅ', '2': '‚ÇÇ', '3': '‚ÇÉ', '4': '‚ÇÑ', '5': '‚ÇÖ', '6': '‚ÇÜ', '7': '‚Çá', '8': '‚Çà', '9': '‚Çâ',
      'a': '‚Çê', 'e': '‚Çë', 'h': '‚Çï', 'i': '·µ¢', 'j': '‚±º', 'k': '‚Çñ', 'l': '‚Çó', 'm': '‚Çò', 'n': '‚Çô', 'o': '‚Çí',
      'p': '‚Çö', 'r': '·µ£', 's': '‚Çõ', 't': '‚Çú', 'u': '·µ§', 'v': '·µ•', 'x': '‚Çì'
    };
    return text.toLowerCase().split('').map(char => subscriptMap[char] || char).join('');
  },
  superscript: (text) => {
    const superscriptMap = {
      '0': '‚Å∞', '1': '¬π', '2': '¬≤', '3': '¬≥', '4': '‚Å¥', '5': '‚Åµ', '6': '‚Å∂', '7': '‚Å∑', '8': '‚Å∏', '9': '‚Åπ',
      'a': '·µÉ', 'b': '·µá', 'c': '·∂ú', 'd': '·µà', 'e': '·µâ', 'f': '·∂†', 'g': '·µç', 'h': ' ∞', 'i': '‚Å±', 'j': ' ≤',
      'k': '·µè', 'l': 'À°', 'm': '·µê', 'n': '‚Åø', 'o': '·µí', 'p': '·µñ', 'r': ' ≥', 's': 'À¢', 't': '·µó', 'u': '·µò',
      'v': '·µõ', 'w': ' ∑', 'x': 'À£', 'y': ' ∏', 'z': '·∂ª'
    };
    return text.toLowerCase().split('').map(char => superscriptMap[char] || char).join('');
  },

  invisibleInk: (text) => {
    return text.split('').map(char => char + '\u200B').join('');
  },

  sparkles: (text) => {
    return '‚ú®' + text.split('').join('‚ú®') + '‚ú®';
  }
};

function FancyTextGenerator() {
  const [inputText, setInputText] = useState('');
  const [outputText, setOutputText] = useState('');
  const [selectedTransformation, setSelectedTransformation] = useState('mirror');
  const { isDarkMode } = useTheme();

  useEffect(() => {
    if (inputText && selectedTransformation) {
      const transformedText = transformations[selectedTransformation](inputText);
      setOutputText(transformedText);
    } else {
      setOutputText('');
    }
  }, [inputText, selectedTransformation]);

  const copyToClipboard = () => {
    navigator.clipboard.writeText(outputText);
    // You could add a toast notification here
  };

  return (
    <div className={`space-y-6 ${isDarkMode ? 'dark' : ''}`}>
      <Card className="bg-white dark:bg-gray-800">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center dark:text-white">Fancy Text Generator</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="input-text" className="dark:text-white">Enter your text</Label>
            <Input
              id="input-text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder="Type your text here"
              className="w-full dark:bg-gray-700 dark:text-white"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="transformation" className="dark:text-white">Select transformation</Label>
            <Select value={selectedTransformation} onValueChange={setSelectedTransformation}>
              <SelectTrigger id="transformation" className="w-full dark:bg-gray-700 dark:text-white">
                <SelectValue placeholder="Choose a transformation" />
              </SelectTrigger>
              <SelectContent className="dark:bg-gray-800">
              <SelectItem value="mirror" className="dark:text-white dark:hover:bg-gray-700">rorriM</SelectItem>
              <SelectItem value="upsideDown" className="dark:text-white dark:hover:bg-gray-700">n çop «ùp·¥âsd‚à©</SelectItem>
              <SelectItem value="zalgo" className="dark:text-white dark:hover:bg-gray-700">ZÃ∏Ã¢Ã°ÃØÃ∞Ã≥ÃØÕàÃàÃÅÃëÃÑÃìÕúaÃ¥Ã¢Ã®ÃòÃôÃ£ÕéÃæÃäÕóÃÜÃïlÃ∑Ã≤Ã±ÃóÃ•ÃÇÃàÃÅÃÄÃïgÃ∑ÃõÃ∫ÕñÃÖÃîÃàÃÅÃäÕùoÃ∑Ã¢Ã®ÃÆÕéÃ†ÃûÃΩ</SelectItem>
              <SelectItem value="strikeThrough" className="dark:text-white dark:hover:bg-gray-700">SÃ∂tÃ∂rÃ∂iÃ∂kÃ∂eÃ∂ Ã∂TÃ∂hÃ∂rÃ∂oÃ∂uÃ∂gÃ∂hÃ∂</SelectItem>
              <SelectItem value="mockingSpongebob" className="dark:text-white dark:hover:bg-gray-700">mOcKiNg SpOnGeBoB</SelectItem>
              <SelectItem value="circled" className="dark:text-white dark:hover:bg-gray-700">‚í∏‚ìò‚ì°‚ìí‚ìõ‚ìî‚ìì</SelectItem>
              <SelectItem value="medieval" className="dark:text-white dark:hover:bg-gray-700">ùîêùî¢ùî°ùî¶ùî¢ùî≥ùîûùî©</SelectItem>
              <SelectItem value="script" className="dark:text-white dark:hover:bg-gray-700">ùì¢ùì¨ùìªùì≤ùìπùìΩ</SelectItem>
              <SelectItem value="wide" className="dark:text-white dark:hover:bg-gray-700">W i d e</SelectItem>
              <SelectItem value="tinyCaps" className="dark:text-white dark:hover:bg-gray-700">·¥õ…™…¥ è ·¥Ñ·¥Ä·¥òs</SelectItem>
              <SelectItem value="emojiLetters" className="dark:text-white dark:hover:bg-gray-700">üÖ¥üÖºüÖæüÖπüÖ∏ üÖªüÖ¥üÜÉüÜÉüÖ¥üÜÅüÜÇ</SelectItem>
              <SelectItem value="morse" className="dark:text-white dark:hover:bg-gray-700">-- --- .-. ... .</SelectItem>
              <SelectItem value="binary" className="dark:text-white dark:hover:bg-gray-700">01000010 01101001 01101110 01100001 01110010 01111001</SelectItem>
              <SelectItem value="pigLatin" className="dark:text-white dark:hover:bg-gray-700">igpay atinlay</SelectItem>
              <SelectItem value="leetSpeak" className="dark:text-white dark:hover:bg-gray-700">l337 5p34k</SelectItem>
              <SelectItem value="vaporwave" className="dark:text-white dark:hover:bg-gray-700">V A P O R W A V E</SelectItem>
              <SelectItem value="subscript" className="dark:text-white dark:hover:bg-gray-700">‚Çõ·µ§·µ¶‚Çõc·µ£·µ¢‚Çö‚Çú</SelectItem>
              <SelectItem value="superscript" className="dark:text-white dark:hover:bg-gray-700">À¢·µò·µñ·µâ ≥À¢·∂ú ≥‚Å±·µñ·µó</SelectItem>
              <SelectItem value="invisibleInk" className="dark:text-white dark:hover:bg-gray-700">I‚Äãn‚Äãv‚Äãi‚Äãs‚Äãi‚Äãb‚Äãl‚Äãe‚Äã ‚ÄãI‚Äãn‚Äãk</SelectItem>
              <SelectItem value="sparkles" className="dark:text-white dark:hover:bg-gray-700">‚ú®S‚ú®p‚ú®a‚ú®r‚ú®k‚ú®l‚ú®e‚ú®s‚ú®</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {outputText && (
            <div className="space-y-2">
              <Label htmlFor="output-text" className="dark:text-white">Transformed text</Label>
              <div className="relative">
                <Input
                  id="output-text"
                  value={outputText}
                  readOnly
                  className="w-full pr-10 dark:bg-gray-700 dark:text-white"
                />
                <Button
                  onClick={copyToClipboard}
                  variant="ghost"
                  size="icon"
                  className="absolute right-2 top-1/2 transform -translate-y-1/2"
                >
                  <Copy className="h-4 w-4" />
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

export default FancyTextGenerator;